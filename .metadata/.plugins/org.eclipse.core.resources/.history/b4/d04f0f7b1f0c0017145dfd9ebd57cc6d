package tutorialfollower.myfirstmassisproject;

import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import com.massisframework.massis.model.agents.HighLevelController;
import com.massisframework.massis.model.agents.LowLevelAgent;
import com.massisframework.massis.model.building.SimRoom;
import com.massisframework.massis.model.location.Location;
import com.massisframework.massis.model.managers.movement.ApproachCallback;
import com.massisframework.massis.pathfinding.straightedge.FindPathResult.PathFinderErrorReason;

public class MyHelloHighLevelController extends HighLevelController {

	private static final long serialVersionUID = 1L;
	private Location currentTarget;
	
	public MyHelloHighLevelController(LowLevelAgent agent, Map<String, String> metadata, String resourcesFolder) {
		super(agent, metadata, resourcesFolder);
		this.agent.setHighLevelData(this);
	}

	@Override
	public void stop() {
		/*
		 * Clean resources, threads...etc
		 */
	}

	@Override
	public void step() {
		System.out.println("Hey! I am an agent!");
		if (this.currentTarget == null) {
			/* 1 */
	        Random rnd = ThreadLocalRandom.current();
	        Location agentLocation = agent.getLocation();
	        Floor agentFloor = agentLocation.getFloor();
	        List<SimRoom> roomsInFloor = agentFloor.getRooms();
	        int numberOfRooms = roomsInFloor.size();
	        int rndRoomIndex = rnd.nextInt(numberOfRooms);
	        final SimRoom rndRoom = roomsInFloor.get(rndRoomIndex);

	     /* 2 */ 
	        Location randomLocation = rndRoom.getRandomLoc();
	        this.currentTarget = randomLocation;
	    }

	    ApproachCallback callback = new ApproachCallback() {
	        @Override
	        public void onTargetReached(LowLevelAgent agent) {
	        	currentTarget = null;
	        }

	        @Override
	        public void onSucess(LowLevelAgent agent) {
	            // Everything ok. The agent has moved a little bit.
	        }

	        @Override
	        public void onPathFinderError(PathFinderErrorReason reason) {
	            // Error!
	            Logger.getLogger(MyHelloHighLevelController.class.getName())
	               .log(Level.SEVERE,"Error when approaching to {0} Reason: {1}",
	               new Object[] { currentTarget, reason });
	        }
	    };

	    /* 3 */ this.agent.approachTo(this.currentTarget, callback);
	}
}