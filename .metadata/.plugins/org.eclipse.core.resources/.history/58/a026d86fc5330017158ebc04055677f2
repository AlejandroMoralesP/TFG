package tutorialfollower.myfirstmassisproject;

import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import com.massisframework.massis.model.agents.HighLevelController;
import com.massisframework.massis.model.agents.LowLevelAgent;
import com.massisframework.massis.model.building.Floor;
import com.massisframework.massis.model.building.SimRoom;
import com.massisframework.massis.model.location.Location;
import com.massisframework.massis.model.managers.movement.ApproachCallback;
import com.massisframework.massis.pathfinding.straightedge.FindPathResult.PathFinderErrorReason;

import straightedge.geom.KPolygon;
import straightedge.geom.path.PathBlockingObstacle;

public class ObjectHighLevelController extends HighLevelController {

	private static final long serialVersionUID = 1L;
	private static final double tag_max_distance = 50;
	private static final double search_range = 200;
	private Location currentTarget;
	
	public boolean isDisaster() {
	    return "true".equals(this.agent.getProperty("DISASTER"));
	}
	public void setDisaster(boolean disaster) {
	    this.agent.setProperty("DISASTER", String.valueOf(disaster));
	}
	
	
	void printAgentsIDsInRange(double range) {
	    StringBuilder sb = new StringBuilder();
	    boolean prueba = false;

	    for (LowLevelAgent otherAgent : this.agent.getAgentsInRange(range)) {
	    final int otherId = otherAgent.getID();
	    final Location agentLoc = this.agent.getLocation();
	    final Location otherLoc = otherAgent.getLocation();
	    final double distance = agentLoc.distance2D(otherLoc);
	    System.out.println(this.metadata.get("ID"));
	   

	    sb.append("\tAgent #").append(otherId).append(". distance: ")
	            .append(distance).append("\n");
	    }
	    if (sb.length() > 0) {
	    System.out.println("Agent #" + this.agent.getID()+
	        " has in the range of "+range+" cm:");
	    if (prueba){
	    	System.out.println("HOLAAAAAA");
	    }
	    System.out.println(sb.toString());
	    }
	}
	
	public ObjectHighLevelController(LowLevelAgent agent, Map<String, String> metadata, String resourcesFolder) {
		super(agent, metadata, resourcesFolder);
		this.agent.setHighLevelData(this);
		
		String taggedStr = metadata.get("DISASTER");

	    if (taggedStr == null || !"true".equals(metadata.get("DISASTER"))) {
	        this.setDisaster(false);
	    } else {
	        this.setDisaster(true);
	    }
	    
	    taggedStr = metadata.get("KNOWPLACE");
	    
	    if (taggedStr == null || !"true".equals(metadata.get("KNOWPLACE"))) {
	        this.setKnowPlace(false);
	    } else {
	        this.setKnowPlace(true);
	    }
	    
	}
	
	private MyHelloHighLevelController getNearestAgent (double range, boolean tagStatus) {

		/* Set a high limit */
		double minDist = Float.MAX_VALUE;

		/* Location of this agent */
		final Location agentLoc = this.agent.getLocation();

		/* Nearest agent found */
		MyHelloHighLevelController nearest = null;
		for (LowLevelAgent otherAgent : this.agent.getAgentsInRange(range)) {
			/*
			 * Retrieve the high-level data of the other agent. It should be of
			 * the type of agent playing this game, MyHelloHighLevelController.
			 */
			final Object highLevelData = otherAgent.getHighLevelData();
			if (highLevelData instanceof MyHelloHighLevelController) {
				MyHelloHighLevelController otherCtrl =
						(MyHelloHighLevelController) highLevelData;
				/*
				 * Check the search condition
				 */
				if (otherCtrl.isTagged() == tagStatus) {
					final Location otherLoc = otherAgent.getLocation();
					final double distance = agentLoc.distance2D(otherLoc);
					/*
					 * Store if nearest.
					 */
					if (distance < minDist) {
						nearest = otherCtrl;
						minDist=distance;
					}
				}
			}
		}
		return nearest;
	}
	
	private boolean seesTaggedAgent() {
	    // true, because is tagged
	    return getNearestAgent(search_range, true) != null;
	}
	
	private boolean isDistanceLessThan50cm(LowLevelAgent a1, LowLevelAgent a2) {
		return a1.getLocation().distance2D(a2.getLocation())<50;
	}

	@Override
	public void stop() {
		/*
		 * Clean resources, threads...etc
		 */
	}

	@Override
	public void step() {
		
		if (this.isKnowPlace()){
			System.out.println("Conozco el lugar");
			printAgentsIDsInRange(2000000000);
		}
		
		if (this.currentTarget == null) {
	       	/* 1 */ SimRoom currentRoom = this.agent.getRoom();
	       	/* 2 */ this.currentTarget = currentRoom.getRandomLoc();
	    }
	    
		System.out.println(currentTarget);
	    System.out.println("ES EL CURRENT TARGET");

	    ApproachCallback callback = new ApproachCallback() {
	       	@Override
	       	public void onTargetReached(LowLevelAgent agent) {
	           	// Target has been reached.
	       		currentTarget = null;
	       	}

	       	@Override
	       	public void onSucess(LowLevelAgent agent) {
	           	// Everything ok. The agent has moved a little bit.
	       	}

	       	@Override
	       	public void onPathFinderError(PathFinderErrorReason reason) {
	           	// Error!
	           	Logger.getLogger(MyHelloHighLevelController.class.getName())
	            	.log(Level.SEVERE,
	           		   "Error when approaching to {0} Reason: {1}",
	             	new Object[] { currentTarget, reason });
	       	}
	   	};
	
	   	/* 3 */ this.agent.approachTo(this.currentTarget, callback);
		/*if (this.isTagged()) {
	        runAsTagged();
	    } else {
	        runAsNotTagged();
	    }*/
	}

}
